#!/usr/bin/env bash
#
# Gerekli uygulamalar; 'uygulamalar' dosyasından alınır.

# Associative array (dictionary) tanımla
declare -A dict
declare -A varlik
declare -A pkgmgrs=(
    [debian]='apt-get install -y'
    [ubuntu]='apt-get install -y'
    [arch]='pacman -S --noconfirm'
    ['red hat']='yum -y install'
    [alpine]='apk add'
    [opensuse]='zypper in -y'
    [fedora]='dnf install -y'
)

# Distro adını al (sık kullanılanlar)
distro=$(cat /etc/os-release | tr [:upper:] [:lower:] | grep -Eoi '(debian|ubuntu|arch|red hat|alpine|fedora|opensuse)' | uniq)

# Gerekli uygulamaları dosyadan oku
otoKurulum=$1
# Bu betiğin kendi dizinini al ve uygulama listesi dosyalarını burada ara.
kendiDizini="$(dirname $0)"
appcore=$(find "$kendiDizini" -type f -name 'app-core')
if [[ -z "$appcore" ]]; then
    echo "$kendiDizini dizini içerisinde temel uygulamalar dosyası bulunamadı"
    exit 1
fi
while read -r key val; do
    dict[$key]=$val
done <"$appcore"
if [[ $otoKurulum -eq 0 ]]; then
    # Etkileşimli kipte core uygulamalarla birlikte extra uygulamar da gereklidir
    appextra=$(find "$kendiDizini" -type f -name 'app-extra')
    if [[ -z "$appcore" ]]; then
        echo "$kendiDizini dizini içerisinde extra uygulamalar dosyası bulunamadı"
        exit 1
    fi
    while read -r key val; do
        dict[$key]=$val
    done <"$appextra"
fi

# Uygulamaların varlığını yokla
for k in "${!dict[@]}"; do
    v="${dict[$k]}"
#     echo Yoklanacak: $k - $v
    read -ra vals <<< "$v" # Diziye dönüştür
    sayim="${#vals[@]}" # kaç sözcük var?
    if [[ $sayim -gt 1 ]]; then
        # Bu grupta alternatifler var. Alternatiflerden birinin olması yeterli
#         echo $sayim
        var=0 # uygulama yok
        for vv in "${vals[@]}"; do
            if command -v $vv &> /dev/null; then
                var=1 # uygulama var
                varlik[$k]="$vv"
                break
            fi
        done
        if [[ $var -eq 0 ]]; then
            olmayanKeyler+=("$k") # bu gruptaki alternatiflerden hiçbiri yok
        fi
    else
        # Bu grupta alternatif yok
        if ! command -v $v &> /dev/null; then
            olmayanKeyler+=("$k") # uygulama yok
        else
            varlik[$k]="$v"
        fi
    fi
done

# Bilgi mesajını oluştur
if [[ "${#olmayanKeyler[@]}" -gt 0 ]]; then
    pkgmgr="${pkgmgrs[$distro]}"
    yukle="$pkgmgr"
    for ok in "${olmayanKeyler[@]}"; do
        msg+="$ok için: "
        read -ra vals <<< "${dict[$ok]}"
        sayim="${#vals[@]}"
        if [[ $sayim -gt 1 ]]; then
            s=0
            for v in "${vals[@]}"; do
                msg+="'$v'"
                yukle+=" $v"
                if [[ $((s++)) -lt $((sayim - 1)) ]]; then
                    msg+=" veya "
                fi
            done
            msg+=" uygulamalarından herhangi birinin,\n"
        else
            if [[ $vals =~ "inotify" ]]; then
                vals="inotify-tools"
            fi
            yukle+=" $vals"
            msg+="'$vals' uygulamasının,\n"
        fi
    done
    msg+="sistemde yüklü olması gereklidir.\nBu uygulamaları yükleyip kurulumu yeniden çalıştırınız."
    msg+="\n\nBu uygulamaları Linux dağıtımınızda yüklemek için"
    msg+="\naşağıdaki komutu yetkili kullanıcı olarak çalıştırınız."
    msg+="\n\n$yukle"
else
    msg="Gereken tüm uygulamalar sistemde yüklü.\nÜretim Otomasyonu şimdi kurulacak."
fi
# Bilgi mesajını görüntüle
echo -e "$msg"

# echo "${!varlik[@]}=${varlik[@]}"
# Saptanan uygulamaları stdout'a yazdır
# for k in "${!varlik[@]}"; do
#     echo "$k=${varlik[$k]}"
# done
if [[ "${#olmayanKeyler[@]}" -eq 0 ]]; then
    exit 0
else
    exit 1 # Yüklenmesi gereken uygulamalar var
fi
