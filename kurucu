#!/usr/bin/env bash
urtotmKurucuDizini="$(realpath "$0")"
urtotmKurucuDizini="${urtotmKurucuDizini%/*}"
urtotmDizini="${urtotmKurucuDizini%/*}" # Bir üst dizin üretim otomasyonu dizini
urtotmBashUretimDizini="${urtotmDizini%/*}/üretim" # Bir üst dizin çalışma dizini
urtotmKurucuLogDizini="${urtotmBashUretimDizini%/*}/logs" # Bir üst dizin çalışma dizini

# Araçlar ve ek yollarını ekle
PATH+=":${urtotmBashUretimDizini}/araclar"
PATH+=":${urtotmDizini}/araclar"
PATH+=":${urtotmKurucuDizini}/ek"

if [[ ! -d $urtotmKurucuLogDizini ]]; then
    mkdir -p "$urtotmKurucuLogDizini"
fi

if [[ ! -d $urtotmBashUretimDizini ]]; then
    mkdir -p "$urtotmBashUretimDizini"
fi

urtotmKurucuLogDosyasi="${urtotmKurucuLogDizini}/urtotm-bash-kurulum-$(date +"%Y%m%d-%H%M%S").log"
touch "$urtotmKurucuLogDosyasi"

# Dialog işlevlerini barındıran dosya
source etkilesim
source ek
source logcu "$urtotmKurucuLogDosyasi"
echo "Kurucu dizini: $urtotmKurucuDizini"
echo "Üretim Otomasyonu dizini: $urtotmDizini"
echo "Çalışma dizini: $urtotmBashUretimDizini"
echo "Log dizini: $urtotmKurucuLogDizini"

# Tüm betiklerde kullanılan uygulamaların varlığını burada yokla
if ! mesg=$(uygulamalari-yokla); then
    # Yüklenmesi gereken uygulamalar var...
    mesajGoster uyari "$baslikProje" "$mesg"
    exit 1
else
    mesajGoster bilgi "$baslikProje" "$mesg"
fi

# Projenin adını al
while [[ -z "$projeAdi" ]]; do
    projeAdi=$(girdiAl "$baslikProje" "Projenizin adını giriniz")
    if [[ -z "$projeAdi" ]]; then
        mesajGoster hata "$baslikProje" "Proje adı boş bırakılmamalıdır!"
    fi
done
projeAdi="${projeAdi//' '/-}" # Boşlukları tire ile değiştir
projeDialogBaslik="${projeAdi}-${baslikProje}"
# echo "Proje adı: $projeAdi"
# Önce platform bilgisini al
# Mevcut platformlar: MPLABx, Android Studio
platform=$(secenekGoster "$baslikProje" "$platformSec" "${!platformlar[@]}")
dk=$?
donusKoduDegerlendir "$dk" "Platform seçimi"
# echo $platform seçildi
projeDizini=$(dizinSec "$baslikProje - $projeDizininiSec")
dk=$?
donusKoduDegerlendir "$dk" "Hedef seçimi"
# echo $projeDizini seçildi
projeUretimDizini=$(dizinSec "$baslikProje - $uretimDizininiSec")
dk=$?
donusKoduDegerlendir "$dk" "Üretim dizini seçimi"
# echo $projeUretimDizini seçildi
yedeklemeDiziniAdi=$(girdiAl "$baslikProje" "$yedekDiziniAdiniGir")
dk=$?
donusKoduDegerlendir "$dk" "Yedek dizini bilgisi alma"
# echo $yedeklemeDiziniAdi seçildi

echo "Platform: $platform"
echo "Proje dizini: $projeDizini"
echo "Üretim dizini: $projeUretimDizini"
echo "Yedek dizini adı $yedeklemeDiziniAdi"

if ! tmp=$(platformGecerli "$platform"); then
    mesajGoster hata "$baslikProje" "Geçersiz bir platform: $tmp"
    exit 1
fi
platform=$tmp
echo "Platform tamam: $platform"

if [[ $platform == "${platformlar[Ceedling]}" ]]; then
    urunUzantisi=$(girdiAl "$baslikProje" "$urunUzantisiniBelirt")
fi

if [[ ! -e "$projeDizini" ]]; then
    mesajGoster hata "$baslikProje" "Hedef için geçersiz bir dizin: $projeDizini"
    exit 1
fi
echo "Hedef tamam: $projeDizini"

# Hedef dizinleri yokla ve gerekirse oluştur
if [[ $platform == "${platformlar["Üretim Otomasyonu Bash"]}" ]]; then
# Üretim otomasyonu için projelere de birer dizin oluştur
    uretimOtomasyonuDizini="${projeUretimDizini}/.urtotm/${projeAdi}"
    yedekDizini="${projeUretimDizini}/${yedeklemeDiziniAdi}/${projeAdi}"
else
    uretimOtomasyonuDizini="${projeUretimDizini}/.urtotm"
    yedekDizini="${projeUretimDizini}/${yedeklemeDiziniAdi}"
fi
echo "Yedek dizini $yedekDizini"
if [[ ! -d $yedekDizini ]]; then
    if ! mkdir -p "$yedekDizini"; then
        mesajGoster hata "$baslikProje" "$yedekDizini dizinini yaratma $islemiSirasindaHata"
        exit 1
    fi
fi

if [[ ! -d "$uretimOtomasyonuDizini" ]]; then
    if ! mkdir -p "$uretimOtomasyonuDizini"; then
        mesajGoster hata "$baslikProje" "$uretimOtomasyonuDizini dizinini yaratma $islemiSirasindaHata"
        exit 1
    fi
fi

ensonSurumDizini="$(find "$urtotmBashUretimDizini" -type d -name ensonsürüm | tail -1)"
echo "Enson sürüm dizini - $ensonSurumDizini"
if [[ ! -d "$ensonSurumDizini" ]]; then
    echo "Enson sürüm dizini oluşturuluyor..."
    ensonSurumDizini="${urtotmBashUretimDizini}/ensonsürüm"
    mkdir -p "$ensonSurumDizini"
fi

if [[ "$platform" == "${platformlar["Üretim Otomasyonu Bash"]}" ]]; then
    # Bir urtotm-bash projesi ise platform yerine proje adını kullan.
    # Çünkü urtotm-bash-urtotm yayınla betiğinde proje adı kullanılır.
    urtotmPlatformDiziniAdi="$projeAdi"
else
    urtotmPlatformDiziniAdi="urtotm-bash-${platform}"
fi
ensonSurumPlatformDizini="${ensonSurumDizini}/${urtotmPlatformDiziniAdi}"

# Normalde herbir üretim otomasyonu reposu, enson sürümünü, ensonsürüm ürün dizinine
# kurma işini kendi üretim otomasyonu ile yapar. Ancak yine de ilgili reponun son
# sürümünün olmaması ihtimaline karşın son sürüm dizinlerinin varlığı yoklanır, yoksa
# son sürümleri ürün dizinine çıkarılır.
# PWD'yi etkilememek içi GIT_DIR git çevre değişkenini ilgili reponun git dizinine kur
# GIT_DIR=Hedef-Repo.git git archive main | tar -xf - -C [Hedef dizin]
# Hedef dizin var olmalı yoksa tar hata verir.
echo "Enson sürüm platform dizini - $ensonSurumPlatformDizini"
if [ ! -d "$ensonSurumPlatformDizini" ]; then
    # Önce dizini oluştur yoksa tar komutu hata verir
    mkdir -p "$ensonSurumPlatformDizini"
fi
# Sürüm üretimi / çıkarıcı çalıştır
platformDizini="${urtotmDizini}/${platform}"
if ! GIT_DIR="$platformDizini/.git" git archive main ':!test*/*' | tar -xf - -C "$ensonSurumPlatformDizini"
then
    mesajGoster hata "$baslikProje" "Platform enson sürüm üretimi $islemiSirasindaHata"
    exit 1
fi

ensonSurumAraclarDizini="${ensonSurumDizini}/urtotm-bash-araclar"
echo "Enson sürüm araçlar dizini - $ensonSurumAraclarDizini"
if [[ ! -d "$ensonSurumAraclarDizini" ]]; then
    # Önce dizini oluştur yoksa tar komutu hata verir
    mkdir -p "$ensonSurumAraclarDizini"
fi
# Sürüm üretimi / çıkarıcı çalıştır
araclarDizini="${urtotmDizini}/araclar"
if ! GIT_DIR="$araclarDizini/.git" git archive main ':!test*/*' | tar -xf - -C "$ensonSurumAraclarDizini"
then
    mesajGoster hata "$baslikProje" "Araçlar enson sürüm üretimi $islemiSirasindaHata"
    exit 1
fi

# find komutu bulunan dizinleri listelemeye en alt dizinlerden başlıyor gibi. Bu yüzden hedefin 
# alt dizinlerinde başka repolar varsa önce alt dizindeki repoların hooks dizinlerini listeler.
# Biz burada projenin kendi git reposu ile ilgilendiğimiz için yalnızca projenin reposunun
# hooks dizinini alacağız. Birden fazla repo olması durumunda projenin reposu en altta olacağı
# için tail -1 komutuya en sondan birinci çıktıyı alacağız. tail komutu yalnızca bir repo olduğu
# durumda da sorun yaratmayacaktır.
gitKancalariDizini="$(find "$projeDizini" -type d -name hooks | tail -1)"
echo "Git kancaları dizini - $gitKancalariDizini"
if [[ ! -d "$gitKancalariDizini" ]]; then
    mesajGoster hata "$baslikProje" "$gitReposuBulunamadi"; exit 1
fi

araclarDizini=~/.bin/urtotm-araclar
# Ardından dosyalari rsync ile yerlerine kopyala
# Git kancalarını hedefe yükle
if ! rsync -qa --log-file="$urtotmKurucuLogDosyasi" --exclude=.git \
    "${ensonSurumPlatformDizini}/git-hooks/" "${gitKancalariDizini}/"; then
    mesajGoster hata "$baslikProje" "Git kancaları $kurulumuSirasindaHata"
    exit 1
fi

# Platforma özel betik ve dosyaları yükle; ör. yayinla, disla vb.
if ! rsync -qa --log-file="$urtotmKurucuLogDosyasi" --exclude={git-hooks,.git} --delete \
    "${ensonSurumPlatformDizini}/" "${uretimOtomasyonuDizini}/"; then
    mesajGoster hata "$baslikProje" "Yayınlama betiği $kurulumuSirasindaHata"
    exit 1
fi

# Araçlar kendi alt dizininde olacağı için fazlalıkları güvenle silebiliriz
if ! rsync -qa --log-file="$urtotmKurucuLogDosyasi" --delete --exclude=.git \
    "${ensonSurumAraclarDizini}/" "${araclarDizini}/"; then
    mesajGoster hata "$baslikProje" "Üretim otomasyonu araçları $kurulumuSirasindaHata"
    exit 1
fi

# Üretim otomasyonunun hedefte çalışırken gereksineceği çevre değişkenlerini içerecek dosyayı yarat
urtotmenv="${uretimOtomasyonuDizini}/urtotmenv"
projeLogDosyaOneki="$projeAdi-urtotm"
projeLogDizini="${HOME}/.log/${projeLogDosyaOneki}"
mkdir -p "$projeLogDizini" # Projenin log dizinini yarat

# Yolları ve değişkenlerini çevresel değişkenler (environment variable) dosyasına yaz
cat <<- SON > "$urtotmenv"
export urtotm_projeAdi="$projeAdi"
export urtotm_dialogBaslik="$projeDialogBaslik"
export urtotm_platform="$platform"
export urtotm_projeDizini="$projeDizini"
export urtotm_projeGitDizini="${gitKancalariDizini%/hooks}"
export urtotm_uretimDizini="$projeUretimDizini"
export urtotm_yedekDizini="$yedekDizini"
export urtotm_projeUrtotmDizini="$uretimOtomasyonuDizini"
export urtotm_projeUrtotmenv="$urtotmenv"
export urtotm_projeLogDosyaOneki="${projeLogDosyaOneki}"
export urtotm_projeLogDizini="$projeLogDizini"
export urtotm_urunUzantisi="$urunUzantisi"
export PATH+=:${araclarDizini}:${yedekDizini}:${uretimOtomasyonuDizini}
SON

# Kancalara üretim otomasyonu config (urtotmenv) dosyasını source etme ifadesi ekle
pushd "$gitKancalariDizini"
while read -r kanca; do
    # source etkilesim ifadesinden önceki satıra ekle
    sed -i -e "/^source etkilesim/ i\source \"${urtotmenv}\"\\" \
        -e 'export urtotm_projeLogDosyasi="${urtotm_projeLogDizini}/${urtotm_projeLogDosyaOneki}-$(date +"%Y%m%d_%H%M%S")"\' \
        -e 'source logcu "$urtotm_projeLogDosyasi"' "$kanca"
done < <(ls -I "*.sample")
popd

# En son hedefin güncelleme listesine eklenip eklenmeyeceğini sor.
# Liste 3 alandan oluşur ve şu biçimdedir:
#     $1           $2                   $3 
# [Platform]::[Proje adı]::[Projenin urtotmenv dosya yolu]
# Güncelleme listesi ensonsürüm dizininde saklanır ve bir platform için üretim otomasyonu
# güncellemesi olduğunda, ilgili platformun üretim otomasyonu güncelleme listesini ilgili
# platform için yoklar. Lisetedeki projelerin platformları bu platform ise herbir proje için
# yerinde üretim otomasyonu güncellemesi yapılır.
# urtotmenv projenin üretim otomasyonu ile ilgili tüm bilgileri içerdiğinden
# güncelleme için gerekli bilgileri sağlar.
guncellemeDosyasi="${ensonSurumDizini}/.guncellemeListesi"
if [[ ! -e $guncellemeDosyasi ]]; then
    touch "$guncellemeDosyasi"
fi

projeListede=$(awk -v prj="$projeAdi" -F'::' '$2 == prj {print $2}' "$guncellemeDosyasi")
if [[ -z "$projeListede" ]]; then
    if evetHayirGoster "$baslikProje" "Bu hedef ürün otomasyonu güncelleme listesine eklensin mi?"
    then
        echo "$platform::$projeAdi::$urtotmenv" >> "$guncellemeDosyasi"
        echo "$projeDizini güncelleme listesine eklendi"
    fi
fi

# Kurulum tamamlandıktan sonra log dosyasını öner
if evetHayirGoster "$baslikProje" "Kurulum tamamlandı. Bu kurulumun log dosyası:\n${urtotmKurucuLogDosyasi}.\nŞimdi görmek ister misiniz?"
then
    if command -v xdg-open >& /dev/null; then
        #Platformun varsayılan dosya görüntüleyicisiyle aç
        xdg-open "$urtotmKurucuLogDosyasi"
    else
        yaziGoster "$urtotmKurucuLogDosyasi"
    fi
fi
